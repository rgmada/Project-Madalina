-- Database Creation
CREATE TABLE StudentInfo (
    STU_ID INT NOT NULL PRIMARY KEY, 
    STU_NAME VARCHAR(20), 
    DOB DATE, 
    PHONE_NO VARCHAR(20), 
    EMAIL_ID VARCHAR(20), 
    ADDRESS VARCHAR(100)
);

CREATE TABLE CoursesInfo (
    COURSE_ID INT NOT NULL PRIMARY KEY, 
    COURSE_NAME VARCHAR(20), 
    COURSE_INSTRUCTOR_NAME VARCHAR(20)
);

CREATE TABLE Enrollmentinfo (
    ENROLLMENT_ID INT NOT NULL PRIMARY KEY, 
    STU_ID INT,
    COURSE_ID INT,
    ENROLL_STATUS VARCHAR(20),
    FOREIGN KEY (STU_ID) REFERENCES StudentInfo(STU_ID) ON DELETE CASCADE, 
    FOREIGN KEY (COURSE_ID) REFERENCES CoursesInfo(COURSE_ID) ON DELETE CASCADE
);

-- Data Creation
INSERT INTO StudentInfo VALUES (1456, 'GEORGE', '12-MAR-82', '289028902890', 'george@gmail.com', 'BUCURESTI'),
    (1325, 'VASILE', '05-0CT-84', '245624562456', 'vasile@gmail.com', 'PITESTI'),
    (1645, 'MARIA', '17-JUN-83', '140014001400', 'maria@gmail.com', 'PLOIESTI'),
    (3145, 'ION', '24-JAN-85', '325232523252', 'ion@gmail.com', 'PLOIESTI'),
    (2146, 'STANCA', '15-MAY-82', '262026202620', 'stanca@gmail.com', 'BUCURESTI'),
    (3251, 'ALEX', '07-NOV-81', '157015701570', 'alex@gmail.com','BRASOV'),
    (2215, 'ELENA', '29-AUG-84', '224622462246', 'elena@gmail.com','BUCURESTI'),
    (4311, 'ADRIAN', '31-JUL-83', '445044504450', 'adrian@gmail.com','BUCURESTI'),
    (3514, 'FLOREA', '03-FEB-81', '323032303230', 'florea@gmail.com','BRASOV'),
    (1925, 'OANA', '20-DEC-84', '432143214321', 'oana@gmail.com','BUCURESTI'),
    (2101, 'MARIUS', '02-SEP-85', '251425142514', 'marius@gmail.com','PITESTI'),
    (4705, 'VOICU', '19-APR-84', '129012901290', 'voicu@gmail.com','BRASOV')
;

INSERT INTO CoursesInfo VALUES (1, 'Basic SQL', 'Ionescu'),
    (2, 'Java Basic', 'Popescu'),
    (3, 'Excel', 'Pamfil'),
    (4, 'VBA', 'Pamfil'),
    (5, 'Advanced SQL', 'Ionescu'),
    (6, 'Advanced Java', 'Popescu'),
    (7, 'Python', 'Dumitriu'),
    (8, 'C++', 'Georgescu'),
    (9, 'JavaScript', 'Popescu')
;

INSERT INTO Enrollmentinfo VALUES (0011, 1456, 8, 'Enrolled'),
    (0012, 2101, 1, 'Not Enrolled'),
    (0013, 1925, 3, 'Not Enrolled'),
    (0014, 4705, 7, 'Enrolled'),
    (0015, 3514, 8, 'Not Enrolled'),
    (0016, 4311, 9, 'Enrolled'),
    (0017, 2215, 3, 'Enrolled'),
    (0018, 1325, 2, 'Enrolled'),
    (0019, 3145, 4, 'Enrolled'),
    (0020, 1645, 8, 'Enrolled'),
    (0021, 2146, 4, 'Enrolled'),
    (0022, 3251, 6, 'Enrolled'),
    (0023, 2101, 2, 'Enrolled'),
    (0024, 1925, 1, 'Enrolled'),
    (0025, 3514, 3, 'Enrolled'),
    (0026, 3145, 3, 'Not Enrolled'),
    (0027, 3251, 9, 'Not Enrolled'),
    (0028, 2146, 3, 'Enrolled'),
    (0029, 4705, 9, 'Enrolled'),
    (0030, 1925, 2, 'Enrolled'),
    (0031, 1456, 5, 'Not Enrolled')
;

-- Retrieve the Student Information
-- a) Write a query to retrieve student details, such as student name, contact information and Enrollment status. 
SELECT si.STU_NAME, si.PHONE_NO, si.EMAIL_ID, si.ADDRESS, ei.ENROLL_STATUS
FROM StudentInfo si
INNER JOIN Enrollmentinfo ei ON si.STU_ID = ei.STU_ID;

-- b) Write a query to retrieve a list of courses in which a specific student is enrolled. 
SELECT si.STU_ID, si.STU_NAME, ci.COURSE_NAME, ei.ENROLL_STATUS
FROM StudentInfo si
INNER JOIN Enrollmentinfo ei ON si.STU_ID = ei.STU_ID
INNER JOIN CoursesInfo ci ON ci.COURSE_ID = ei.COURSE_ID
WHERE si.STU_ID = '1925';

-- c) Write a query to retrieve course information, including course name, instructor information.
SELECT COURSE_NAME, COURSE_INSTRUCTOR_NAME
FROM CoursesInfo
ORDER BY COURSE_INSTRUCTOR_NAME;

-- d) Write a query to retrieve course information for a specific course.
SELECT COURSE_NAME, COURSE_INSTRUCTOR_NAME
FROM CoursesInfo
WHERE COURSE_ID = 5;

SELECT ci.COURSE_NAME, ci.COURSE_INSTRUCTOR_NAME, si.STU_NAME, ei.ENROLL_STATUS
FROM CoursesInfo ci
INNER JOIN Enrollmentinfo ei ON ci.COURSE_ID = ei.COURSE_ID
INNER JOIN StudentInfo si ON si.STU_ID = ei.STU_ID
WHERE ci.COURSE_ID = 5
AND ei.ENROLL_STATUS = 'Enrolled';

-- e) Write a query to retrieve course information for multiple courses.
SELECT COURSE_NAME, COURSE_INSTRUCTOR_NAME
FROM CoursesInfo
WHERE COURSE_ID IN (5, 7, 8);

-- f) Test the queries to ensure accurate retrieval of student information (execute the queries and verify the results against the expected output).
-- all
SELECT * FROM StudentInfo;

-- by Stu_Id
SELECT * FROM StudentInfo WHERE STU_ID = 1925;

-- by Stu_Name
SELECT * FROM StudentInfo WHERE STU_NAME = 'GEORGE';

-- Reporting and Analytics
-- a) Write a query to retrieve the number of students enrolled in each course.
SELECT ci.COURSE_NAME, COUNT (*)
FROM CoursesInfo ci
INNER JOIN Enrollmentinfo ei ON ci.COURSE_ID = ei.COURSE_ID
where ei.Enroll_status = 'Enrolled'
group by ci.COURSE_NAME;

--or

SELECT ci.COURSE_NAME, COUNT (*) as No_Enrolled_Students
FROM CoursesInfo ci
LEFT JOIN Enrollmentinfo ei ON ci.COURSE_ID = ei.COURSE_ID
WHERE ei.Enroll_status = 'Enrolled'
GROUP BY ci.COURSE_NAME;

-- b) Write a query to retrieve the list of students enrolled in a specific course.
SELECT si.STU_NAME
FROM StudentInfo si
INNER JOIN Enrollmentinfo ei ON si.STU_ID = ei.STU_ID
INNER JOIN CoursesInfo ci ON ci.COURSE_ID = ei.COURSE_ID
WHERE ei.Enroll_status = 'Enrolled'
AND ci.COURSE_NAME = 'Excel';

-- c) Write a query to retrieve the count of enrolled students for each instructor.
SELECT ci.COURSE_INSTRUCTOR_NAME, COUNT (*) AS No_Enrolled_Students
FROM CoursesInfo ci
JOIN Enrollmentinfo ei ON ci.COURSE_ID = ei.COURSE_ID
WHERE ei.Enroll_status = 'Enrolled'
GROUP BY ci.COURSE_INSTRUCTOR_NAME;

-- d) Write a query to retrieve the list of students who are enrolled in multiple courses.
SELECT si.STU_NAME, COUNT (*) AS No_Enrolled_Students
FROM StudentInfo si
JOIN Enrollmentinfo ei ON si.STU_ID = ei.STU_ID
WHERE ei.Enroll_status = 'Enrolled'
GROUP BY si.STU_NAME
HAVING COUNT (*) > 1;

-- e) Write a query to retrieve the courses that have the highest number of enrolled students (arranging from highest to lowest).
SELECT ci.COURSE_NAME, COUNT (*) as No_Enrolled_Students
FROM CoursesInfo ci
LEFT JOIN Enrollmentinfo ei ON ci.COURSE_ID = ei.COURSE_ID
WHERE ei.Enroll_status = 'Enrolled'
GROUP BY ci.COURSE_NAME
ORDER BY No_Enrolled_Students DESC;
